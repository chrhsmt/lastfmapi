/**
 * Copyright (C) 2012 Philip W. Sorst <philip@sorst.net>
 * and individual contributors as indicated
 * by the @authors tag.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.dontdrinkandroot.lastfm.api.model;
import net.dontdrinkandroot.lastfm.api.queries.AbstractAuthenticatedGetQuery;
import net.dontdrinkandroot.lastfm.api.queries.AuthenticatedGetQuery;

import org.apache.commons.codec.digest.DigestUtils;
import org.w3c.dom.Element;

public class Auth {

	/**
	 * Create a web service session for a user. Used for authenticating a user when the password can
	 * be inputted by the user. Only suitable for standalone mobile devices. See the authentication
	 * how-to for more.
	 *
	 * @param username
	 *            The last.fm username. (Required).
	 * @param authToken
	 *            A 32-byte ASCII hexadecimal MD5 hash of the last.fm username and the user's
	 *            password hash. i.e. md5(username + md5(password)), where '+' represents a
	 *            concatenation. This can also be generated by {@link Auth#generateMobileToken}
	 *            (Required).
	 * @return
	 */
	public static AuthenticatedGetQuery<Session> getMobileSession(final String username, final String authToken) {

		final AuthenticatedGetQuery<Session> query =
				new AbstractAuthenticatedGetQuery<Session>("auth.getMobileSession") {

					@Override
					public Session parse(final Element root) {

						return new Session(root);
					}
				};

		query.addParameter("username", username);
		query.addParameter("authToken", authToken);

		return query;
	}


	/**
	 * This method can generate a token as required by {@link Auth#getMobileSession}.
	 * @param username The username of the last.fm user to authenticate.
	 * @param password The password of the last.fm user to authenticate
	 * @return The token needed to acquire a mobile session.
	 */
	public static String generateMobileToken(
			final String username,
			final String password
	) {
		return DigestUtils.md5Hex(
				username
				+ DigestUtils.md5Hex(password)
		);
	}


	/**
	 * Fetch a session key for a user. The third step in the authentication process.
	 * See the authentication how-to for more information.
	 * @param token A 32-character ASCII hexadecimal MD5 hash returned by step 1
	 * of the authentication process (following the granting of permissions to
	 * the application by the user) (Required).
	 * @return
	 */
	public static AuthenticatedGetQuery<Session> getSession(
			final String token
	) {
		final AuthenticatedGetQuery<Session> query
		= new AbstractAuthenticatedGetQuery<Session>("auth.getSession") {
			@Override
			public Session parse(final Element root) {
				return new Session(root);
			}
		};
		query.addParameter("token", token);
		return query;
	}


	/**
	 * Fetch an unathorized request token for an API account. This is step 2 of the authentication
	 * process for desktop applications. Web applications do not need to use this service.
	 *
	 * @return
	 */
	//	public static AuthenticatedGetQuery<Serializable> getToken(
	//	) {
	//		//TODO: implement
	//		if (1 == 1) throw new RuntimeException("Not implemented");
	//		AuthenticatedGetQuery<Serializable> query
	//			 = new AbstractAuthenticatedGetQuery<Serializable>("auth.getToken") {
	//				@Override
	//				public Serializable parse(final Element root) {
	//					return null;
	//				}
	//		};
	//		return query;
	//	}


}
