/**
 * Copyright (C) 2012 Philip W. Sorst <philip@sorst.net>
 * and individual contributors as indicated
 * by the @authors tag.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.dontdrinkandroot.lastfm.api.model;

import java.util.ArrayList;
import java.util.List;

import net.dontdrinkandroot.lastfm.api.model.paginatedresult.PaginatedResult;
import net.dontdrinkandroot.lastfm.api.model.paginatedresult.GenericPaginatedResult;
import net.dontdrinkandroot.lastfm.api.queries.AbstractUnauthenticatedGetQuery;
import net.dontdrinkandroot.lastfm.api.queries.NoResponsePostQuery;
import net.dontdrinkandroot.lastfm.api.queries.PostQuery;
import net.dontdrinkandroot.lastfm.api.queries.UnauthenticatedGetQuery;
import net.dontdrinkandroot.lastfm.api.xml.DomUtils;

import org.w3c.dom.Element;


public class Library {

	/**
	 * Add an album to a user's Last.fm library.
	 * 
	 * @param artist
	 *            The artist that composed the track (Required).
	 * @param album
	 *            The album name you wish to add (Required).
	 * @param sk
	 *            A session key generated by authenticating a user via the authentication protocol
	 *            (Required).
	 * @return
	 */
	public static PostQuery<Boolean> addAlbum(final String artist, final String album, final String sk) {

		final PostQuery<Boolean> query = new NoResponsePostQuery("library.addAlbum");

		query.addParameter("artist", artist);
		query.addParameter("album", album);
		query.addParameter("sk", sk);

		return query;
	}


	/**
	 * Add an artist to a user's Last.fm library.
	 * 
	 * @param artist
	 *            The artist name you wish to add (Required).
	 * @param sk
	 *            A session key generated by authenticating a user via the authentication protocol
	 *            (Required).
	 * @return
	 */
	public static PostQuery<Boolean> addArtist(final String artist, final String sk) {

		final PostQuery<Boolean> query = new NoResponsePostQuery("library.addArtist");

		query.addParameter("artist", artist);
		query.addParameter("sk", sk);

		return query;
	}


	/**
	 * Add a track to a user's Last.fm library.
	 * 
	 * @param artist
	 *            The artist that composed the track (Required).
	 * @param track
	 *            The track name you wish to add (Required).
	 * @param sk
	 *            A session key generated by authenticating a user via the authentication protocol
	 *            (Required).
	 * @return
	 */
	public static PostQuery<Boolean> addTrack(final String artist, final String track, final String sk) {

		final PostQuery<Boolean> query = new NoResponsePostQuery("library.addTrack");

		query.addParameter("artist", artist);
		query.addParameter("track", track);
		query.addParameter("sk", sk);

		return query;
	}


	/**
	 * A paginated list of all the albums in a user's library, with playcounts and tag counts.
	 * 
	 * @param user
	 *            The user whose library you want to fetch. (Required).
	 * @param artist
	 *            An artist by which to filter tracks (Optional).
	 * @param limit
	 *            Limit the amount of albums returned (Optional) (maximum/default is 50).
	 * @param page
	 *            The page number you wish to scan to (Optional).
	 * @return
	 */
	public static UnauthenticatedGetQuery<PaginatedResult<List<Album>>> getAlbums(
			final String user,
			final String artist,
			final Integer limit,
			final Integer page) {

		final UnauthenticatedGetQuery<PaginatedResult<List<Album>>> query =
				new AbstractUnauthenticatedGetQuery<PaginatedResult<List<Album>>>("library.getAlbums") {

					@Override
					public PaginatedResult<List<Album>> parse(final Element root) {

						final GenericPaginatedResult<List<Album>> result = new GenericPaginatedResult<List<Album>>(root);
						final List<Element> albumElements = DomUtils.getChildrenByTagName(root, "album");
						final List<Album> albums = new ArrayList<Album>();
						for (final Element albumElement : albumElements) {
							albums.add(new Album(albumElement));
						}
						result.setEntries(albums);

						return result;
					}
				};

		query.addParameter("user", user);
		query.addParameter("artist", artist);
		query.addParameter("limit", limit);
		query.addParameter("page", page);

		return query;
	}


	/**
	 * A paginated list of all the artists in a user's library, with playcounts and tag counts.
	 * 
	 * @param user
	 *            The user whose library you want to fetch (Required).
	 * @param limit
	 *            Limit the amount of artists returned (Optional) (maximum/default is 50).
	 * @param page
	 *            The page number you wish to scan to (Optional).
	 * @return
	 */
	public static UnauthenticatedGetQuery<GenericPaginatedResult<List<Artist>>> getArtists(
			final String user,
			final Integer limit,
			final Integer page) {

		final UnauthenticatedGetQuery<GenericPaginatedResult<List<Artist>>> query =
				new AbstractUnauthenticatedGetQuery<GenericPaginatedResult<List<Artist>>>("library.getArtists") {

					@Override
					public GenericPaginatedResult<List<Artist>> parse(final Element root) {

						final GenericPaginatedResult<List<Artist>> result = new GenericPaginatedResult<List<Artist>>(root);
						final List<Artist> artists = new ArrayList<Artist>();
						final List<Element> artistElements = DomUtils.getChildrenByTagName(root, "artist");
						for (final Element artistElement : artistElements) {
							artists.add(new Artist(artistElement));
						}
						result.setEntries(artists);

						return result;
					}
				};

		query.addParameter("user", user);
		query.addParameter("limit", limit);
		query.addParameter("page", page);

		return query;

	}


	/**
	 * A paginated list of all the tracks in a user's library, with play counts and tag counts.
	 * 
	 * @param user
	 *            The user whose library you want to fetch. (Required).
	 * @param artist
	 *            An artist by which to filter tracks (Optional).
	 * @param album
	 *            An album by which to filter tracks (needs an artist) (Optional).
	 * @param limit
	 *            Limit the amount of tracks returned (maximum/default is 50) (Optional).
	 * @param page
	 *            The page number you wish to scan to (Optional).
	 * @return
	 */
	public static UnauthenticatedGetQuery<PaginatedResult<List<Track>>> getTracks(
			final String user,
			final String artist,
			final String album,
			final Integer limit,
			final Integer page) {

		final UnauthenticatedGetQuery<PaginatedResult<List<Track>>> query =
				new AbstractUnauthenticatedGetQuery<PaginatedResult<List<Track>>>("library.getTracks") {

					@Override
					public PaginatedResult<List<Track>> parse(final Element root) {

						final GenericPaginatedResult<List<Track>> result = new GenericPaginatedResult<List<Track>>(root);
						final List<Element> trackElements = DomUtils.getChildrenByTagName(root, "track");
						final List<Track> tracks = new ArrayList<Track>();
						for (final Element trackElement : trackElements) {
							tracks.add(new Track(trackElement));
						}
						result.setEntries(tracks);

						return result;
					}
				};

		query.addParameter("user", user);
		query.addParameter("artist", artist);
		query.addParameter("album", album);
		query.addParameter("page", page);
		query.addParameter("limit", limit);

		return query;
	}


	/**
	 * Remove an album from a user's Last.fm library.
	 * 
	 * @param artist
	 *            The artist that composed the track (Required).
	 * @param album
	 *            The album name you wish to remove (Required).
	 * @param sk
	 *            A session key generated by authenticating a user via the authentication protocol
	 *            (Required).
	 * @return
	 */
	public static PostQuery<Boolean> removeAlbum(final String artist, final String album, final String sk) {

		final PostQuery<Boolean> query = new NoResponsePostQuery("library.removeAlbum");

		query.addParameter("artist", artist);
		query.addParameter("album", album);
		query.addParameter("sk", sk);

		return query;
	}


	/**
	 * Remove an artist to a user's Last.fm library.
	 * 
	 * @param artist
	 *            The artist name you wish to remove (Required).
	 * @param sk
	 *            A session key generated by authenticating a user via the authentication protocol
	 *            (Required).
	 * @return
	 */
	public static PostQuery<Boolean> removeArtist(final String artist, final String sk) {

		final PostQuery<Boolean> query = new NoResponsePostQuery("library.removeArtist");

		query.addParameter("artist", artist);
		query.addParameter("sk", sk);

		return query;
	}


	/**
	 * Remove a scrobble from a user's Last.fm library.
	 * 
	 * @param artist
	 *            The artist that composed the track (Required).
	 * @param track
	 *            The name of the track (Required).
	 * @param timestamp
	 *            The unix timestamp of the scrobble that you wish to remove (Required).
	 * @param sk
	 *            A session key generated by authenticating a user via the authentication protocol
	 *            (Required).
	 * @return
	 */
	public static PostQuery<Boolean> removeScrobble(
			final String artist,
			final String track,
			final Long timestamp,
			final String sk) {

		final PostQuery<Boolean> query = new NoResponsePostQuery("library.removeScrobble");

		query.addParameter("artist", artist);
		query.addParameter("track", track);
		if (timestamp != null) {
			query.addParameter("timestamp", timestamp / 1000L);
		}
		query.addParameter("sk", sk);

		return query;
	}


	/**
	 * Remove a track to a user's Last.fm library.
	 * 
	 * @param artist
	 *            The artist that composed the track (Required).
	 * @param track
	 *            The track name you wish to remove (Required).
	 * @param sk
	 *            A session key generated by authenticating a user via the authentication protocol
	 *            (Required).
	 * @return
	 */
	public static PostQuery<Boolean> removeTrack(final String artist, final String track, final String sk) {

		final PostQuery<Boolean> query = new NoResponsePostQuery("library.removeTrack");

		query.addParameter("artist", artist);
		query.addParameter("track", track);
		query.addParameter("sk", sk);

		return query;
	}

}
